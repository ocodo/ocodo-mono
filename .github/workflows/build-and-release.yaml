name: Build and Release Ocodo Mono

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fontforge python3-fontforge unzip curl woff2 woff-tools

      - name: Extract version from SFD
        id: sfd_version
        run: |
          VERSION=$(grep 'Version:' ./font/OcodoMono.sfd | sed -n 's/.*info\.ocodo\.fonts\.//p')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get latest release tag (if any)
        id: latest_release
        continue-on-error: true
        run: |
          LATEST=$(curl -sI https://github.com/${{ github.repository }}/releases/latest | grep -i '^location:' | sed -E 's|.*/tag/([^[:space:]]+)|\1|')
          echo "latest=${LATEST:-none}" >> "$GITHUB_OUTPUT"

      - name: Determine if version is new
        id: check
        run: |
          if [ "${{ steps.latest_release.outputs.latest }}" = "none" ] || [ "${{ steps.sfd_version.outputs.version }}" != "${{ steps.latest_release.outputs.latest }}" ]; then
            echo "same=false" >> "$GITHUB_OUTPUT"
          else
            echo "same=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Exit if version is already released
        if: steps.check.outputs.same == 'true'
        run: |
          echo "No new version detected. Skipping build and release."
          exit 0

      - name: Build TTF from SFD
        run: |
          fontforge -c 'import fontforge as ff; font = ff.open("./font/OcodoMono.sfd"); font.generate("./font/OcodoMono.ttf")'

      - name: Download and unzip Nerd Font Patcher
        run: |
          curl -L -o FontPatcher.zip https://raw.githubusercontent.com/ryanoasis/nerd-fonts/refs/heads/master/FontPatcher.zip
          unzip -o FontPatcher.zip -d ./fontpatcher

      - name: Patch font with Nerd Fonts
        run: |
          fontforge --script ./fontpatcher/font-patcher --complete ./font/OcodoMono.ttf

      - name: Create woff2 variant
        run: |
          woff2_compress OcodoMonoNerdFont-Regular.ttf
          woff2_compress OcodoMono.ttf

      - name: Move fonts into place
        run: |
          mv *ttf *woff2 font

      - name: Zip Fonts for release
        run: |
          cd font
          zip "../${{ steps.sfd_version.outputs.version }}.zip" *.{ttf,woff2}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.sfd_version.outputs.version }}
          tag_name: ${{ steps.sfd_version.outputs.version }}
          files: ${{ steps.sfd_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
