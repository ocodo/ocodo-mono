name: Build and Release Ocodo Mono

on:
  push:
    branches:
      - main

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.new_version }}
      version: ${{ steps.sfd_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version from SFD
        id: sfd_version
        run: |
          VERSION=$(grep 'Version:' ./font/OcodoMono.sfd | sed -n 's/.*info\.ocodo\.fonts\.//p')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get latest release tag
        id: latest_release
        run: |
          tag=$(git tag --sort=-version:refname | head -n 1)
          echo "tag=$tag" >> GITHUB_OUTPUT

      - name: Determine if version is new
        id: check
        run: |
          if [ "${{ steps.latest_release.outputs.tag }}" = "" ] || [ "${{ steps.sfd_version.outputs.version }}" != "${{ steps.latest_release.outputs.tag }}" ]; then
            echo "new_version=true" >> "$GITHUB_OUTPUT"
          else
            echo "new_version=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip message
        if: steps.check.outputs.new_version == 'false'
        run: |
          echo "ðŸŸ¢ Version ${{ steps.sfd_version.outputs.version }} already released. Skipping build."

  build-and-release:
    needs: version-check
    if: needs.version-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fontforge python3-fontforge unzip curl woff2 woff-tools

      - name: Build TTF from SFD
        run: |
          fontforge -c 'import fontforge as ff; font = ff.open("./font/OcodoMono.sfd"); font.generate("OcodoMono.ttf")'
          fontforge -c 'import fontforge as ff; font = ff.open("./font/OcodoMono.sfd"); font.generate("OcodoMono.woff2")'

      - name: Download and unzip Nerd Font Patcher
        run: |
          curl -L -o FontPatcher.zip https://raw.githubusercontent.com/ryanoasis/nerd-fonts/refs/heads/master/FontPatcher.zip
          unzip -o FontPatcher.zip -d ./fontpatcher

      - name: Patch font with Nerd Fonts
        run: |
          fontforge --script ./fontpatcher/font-patcher --complete OcodoMono.ttf \
          | grep -E -v "[%â•¢â–ˆâ–‘â•Ÿ\d]"

      - name: Create woff2 variant
        run: |
          woff2_compress OcodoMonoNerdFont-Regular.ttf

      - name: Move fonts into place
        run: |
          mkdir -p dist
          mv *.ttf *.woff2 dist/

      - name: Zip Fonts for release
        run: |
          cd dist
          zip "../OcodoMono-${{ needs.version-check.outputs.version }}.zip" ./*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Ocodo Mono ${{ needs.version-check.outputs.version }}"
          tag_name: ${{ needs.version-check.outputs.version }}
          draft: false
          body: |
            # OcodoMono / OcodoMono-Regular NerdFont

            An ultrathin monospaced font based on DIN

            Good on macOS and Windows

            (better type hinting in the works to improve Linux rendering)
          files: |
            OcodoMono-${{ needs.version-check.outputs.version }}.zip
            dist/*.ttf
            dist/*.woff2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
